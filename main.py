import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
import aiogram.filters as filter
from aiogram.fsm.storage.memory import MemoryStorage

import states as st
import func_tools
from routers_path import sign_up_to_train, registration_new_user

from airtable_database import config, database

logging.basicConfig(level=logging.INFO)
bot = Bot(token="5912451942:AAG2gF8ShXvIeY90On-0f687xQZWZTpckNU")
dp = Dispatcher(storage=MemoryStorage())

dp.include_router(sign_up_to_train.router)
dp.include_router(registration_new_user.router)


# TODO: –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
# TODO: –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫. —É–¥–∞–ª–µ–Ω–∏—è
# TODO: –§—É–Ω–∫. —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# TODO: –Ω–∞–π—Ç–∏ CRM (Notion, Google Sheets) –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


@dp.message(filter.Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):

    entered_client = database.Client(config.base_token, config.api_token)

    user_id = message.from_user.id
    print(entered_client.get_client_by_id_user(user_id))
    if entered_client.get_client_by_id_user(user_id) != []:
        await message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã –∑–∞—à–ª–∏ –∫–∞–∫ {message.from_user.username}", reply_markup=func_tools.generate_main_menu())

    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤ —á–∞—Ç-–±–æ—Ç–µ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º "
                         "–±—ã—Å—Ç—Ä–µ–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –ò–ú–Ø:")
        await state.set_state(st.RegistrationStates.get_name)


@dp.message(filter.Text(func_tools.MainMenuButtons.sign_up_to_train))
async def sign_up_to_train(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è –∑–∞–ø–∏—Å–∏, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –¥–∞–Ω–Ω—ã–µ, "
                         "–∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞ ‚õ∑:", reply_markup=func_tools.generate_types_sport_inline_kb())
    await state.set_state(st.MakingRecordToTrain.choosing_type_sport)


@dp.message(filter.Text(func_tools.MainMenuButtons.check_the_train))
async def show_signed_trains(message: types.Message, state: FSMContext):
    await message.answer("–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∞—à–∏ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ —Ä–∞–Ω–µ–µ.")
    user_id = message.from_user.id
    records = database.Record(config.base_token, config.api_token).get_records_by_client_id(user_id)
    for every_record in records:
        await message.answer(
            f"""\n<b>–í–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</b> ‚Ññ: {every_record["fields"]["–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"].__str__()}"""
            f"""\n‚õ∑ <b>–¢–∏–ø —Å–ø–æ—Ä—Ç–∞</b> ‚õ∑: {every_record["fields"]["–¢–∏–ø —Å–ø–æ—Ä—Ç–∞ (from –¢–∏–ø —Å–ø–æ—Ä—Ç–∞)"].__str__()}"""
            f"""\nüìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</b> üìÖ: {every_record["fields"]["–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"]}""", parse_mode="HTML")


@dp.message(filter.Text(func_tools.MainMenuButtons.show_all_the_trains))
async def show_all_trains(message: types.Message, state: FSMContext):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())